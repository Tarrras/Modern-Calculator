buildscript {
    ext {
        // App dependencies
        appCompatVersion = '1.4.2'
        activityComposeVersion = '1.5.0'
        composeVersion = '1.3.0-alpha01'
        coreTestingVersion = '2.1.0'
        coroutinesVersion = "1.4.2"
        espressoVersion = '3.3.0'
        fragmentVersion = '1.5.0'
        gradleVersion = '7.0.0-beta04'
        junitVersion = '4.13.1'
        kotlinVersion = '1.7.0'
        ktlintVersion = '0.41.0'
        ktxVersion = '1.8.0'
        lifecycleVersion = '2.3.0'
        materialVersion = '1.6.1'
        roomVersion = '2.2.6'
        runnerVersion = '1.0.1'
        truthVersion = '1.0.1'
        testExtJunit = '1.1.2-rc02'
        uiAutomatorVersion = '2.2.0'
        viewPagerVersion = '1.0.0'
        workVersion = '2.5.0'
        hiltVersion = '2.42'
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$hiltVersion"
    }
}// Top-level build file where you can add configuration options common to all sub-projects/modules.

plugins {
    id 'com.android.application' version '7.3.0-beta05' apply false
    id 'com.android.library' version '7.3.0-beta05' apply false
    id 'org.jetbrains.kotlin.android' version '1.7.0' apply false
    id 'com.diffplug.spotless' version '5.10.0'
    id 'org.jetbrains.kotlin.kapt' version '1.7.0'
}

subprojects {
    repositories {
        google()
        mavenCentral()
    }

    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            target '**/*.kt'
            targetExclude("$buildDir/**/*.kt")
            targetExclude('bin/**/*.kt')

            ktlint(rootProject.ktlint)
            licenseHeaderFile rootProject.file('spotless/copyright.kt')
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            // Treat all Kotlin warnings as errors
            allWarningsAsErrors = true

            freeCompilerArgs += '-opt-in=kotlin.RequiresOptIn'

            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += '-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi'
            freeCompilerArgs += '-opt-in=kotlinx.coroutines.FlowPreview'
            freeCompilerArgs += '-opt-in=kotlin.Experimental'

            // Set JVM target to 1.8
            jvmTarget = "1.8"
        }
    }
}